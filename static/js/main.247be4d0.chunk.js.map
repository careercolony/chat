{"version":3,"sources":["components/chat.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","react_default","a","createElement","Component","styles","theme","margin","spacing","unit","padding","concat","Header","data","result","JSON","parse","setState","console","log","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Badge_default","className","badgeContent","Mail_default","build_default","url","onMessage","handleData","bind","App","components_Header","chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAwBeA,qBAnBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAHMR,wEAWf,OACIS,EAAAC,EAAAC,cAAA,mBAdOC,oHCObC,EAAS,SAAAC,GAAK,MAAK,CACrBC,OAAQ,CACNA,OAA6B,EAArBD,EAAME,QAAQC,MAExBC,QAAS,CACPA,QAAO,KAAAC,OAA4B,EAArBL,EAAME,QAAQC,KAArB,SA4CEG,cArCX,SAAAA,EAAYrB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACfpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAHMR,0EAQRqB,GACP,IAAIC,EAASC,KAAKC,MAAMH,GACxBlB,KAAKsB,SAAS,CAACjB,MAAOc,IACtBI,QAAQC,IAAIL,oCAIZ,OACIb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAQmB,SAAS,UACbpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACID,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAYsB,QAAQ,QAAQC,MAAM,WAAlC,OAEIxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAOyB,UAAWtB,EAAOE,OAAQqB,aAAcjC,KAAKI,MAAMC,MAAOyB,MAAM,aACnExB,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,OAGJD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAW6B,IAAI,mFACXC,UAAWrC,KAAKsC,WAAWC,KAAKvC,mBA5BtCS,aCFP+B,mLAVX,OACElC,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OAET1B,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cAPMjC,aCOEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.247be4d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Chat extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n          count: ''\n        };\n      \n    }\n\n    \n\n    render(){\n        return (\n            <div>\n                \n            </div>\n        );\n    }\n}\n\nexport default Chat;","import React, {Component} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport MailIcon from '@material-ui/icons/Mail';\nimport Websocket from 'react-websocket';\n\n\n\nconst styles = theme => ({\n    margin: {\n      margin: theme.spacing.unit * 2,\n    },\n    padding: {\n      padding: `0 ${theme.spacing.unit * 2}px`,\n    },\n  });\n\n\nclass  Header extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n          count: ''\n        };\n      \n    }\n\n    handleData(data) {\n        let result = JSON.parse(data);\n        this.setState({count: result});\n        console.log(result)\n    }\n    \n    render() { \n        return ( \n            <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"title\" color=\"inherit\">\n                        logo\n                        <Badge className={styles.margin} badgeContent={this.state.count} color=\"secondary\">\n                            <MailIcon />\n                        </Badge>\n\n                        <Websocket url='ws://localhost:8086/post/v2/notification/memberID/5cb356f10b0000560028135b/count'\n                            onMessage={this.handleData.bind(this)}/>\n                             \n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n         );\n    }\n}\n \n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './components/chat'\nimport Header from './components/Header'\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        \n            <Header />\n            <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}